/*
 * Copyright Â© 2020, The Gust Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */
{namespace gust.page}


/**
 * Content root template, which wraps all major visible page content in all cases. The content root is customizable
 * in various ways, and linked to GSS stylesheets which apply the customizations. The content root changes based on the
 * invoking browser - mobile or desktop.
 */
{template .contentRoot}
  {@param? mobile: bool}  /** Flag indicating that a mobile browser was detected. */
  {@param? content: html}  /** HTML content to inject into the main body. */
  {@param? pageId: string}  /** ID to apply to the whole page, optionally. */
  {@param? pageClass: string}  /** Class name to apply to the whole page, optionally. */

  {let $inner kind="html"}
      {if isNonnull($content)}
          {$content}
      {else}
        <div></div>
      {/if}
  {/let}

  <main{if isNonnull($pageId)} id="{$pageId}"{/if}
       class="{if $mobile}{css('agent-mobile')}{else}{css('agent-base')}{/if}
              {if isNonnull($pageClass)}{sp}{$pageClass}{/if}">
    {$inner}
  </main>
{/template}


/**
 * Render HTML root prefix values. Generally this includes OpenGraph, and any additional prefixes used by the web app to
 * declare structured content.
 */
{template .prefixes kind="text"}
  {@param? prefixes: list<page.Context.RDFPrefix>}  /** Prefixes to render. */
  {if isNonnull($prefixes)}
    {for $prefix in $prefixes}
        {if isNonnull($prefix) and isNonnull($prefix.prefix) and isNonnull($prefix.target)}
            {if not isFirst($prefix)}{sp}{/if}
            {$prefix.prefix}:{sp}{$prefix.target}
        {/if}
    {/for}
  {else}
    og: http://ogp.me/ns#
  {/if}
{/template}


/**
 * Generic wrapping template for an HTML web page. This is generally used enclosed from a page template, so that the
 * server may have a routine to render a page in full. Page frames are never rendered on the front-end, because the DOM
 * already exists when rendering occurs.
 */
{template .wrap}
  {@inject page: page.Context}  /** Main page-level context, provided to include metadata and page assets. */
  {@param? pageId: string}  /** CSS ID to apply to the whole page, optionally. */
  {@param? base: trusted_resource_uri}  /** Optional page base to apply. */
  {@param? pageClass: string}  /** Class name(s) to apply to the whole page, optionally. */
  {@param? bodyClass: string}  /** Class name(s) to apply to the body element. */
  {@param? mobile: bool}  /** Flag indicating that a mobile browser was detected. */
  {@param? liftedCSS: css}  /** Lifted CSS to apply, if any. */
  {@param? liftedJS: js}  /** Lifted JavaScript to apply, if any. */
  {@param? content: html}  /** Injected body content to apply. */
  {@param? preconnect: list<[domain: uri, crossorigin: bool]>}  /** Pre-connect domains. */
  {@param? additionalHead: html}  /** Additional HTML to apply to the head block. */
  {@param? ogTags: html}  /** OpenGraph tags to include at the bottom of the head block. */
  {@param? jsonLD: js}  /** JSON-LD (JSON Linked Data) description for the page, if any. */
  {@param? preamble: html}  /** Assets to inject early in the render flow for the page head. */
  {@inject? htmlAttrs: attributes}  /** Additional attributes to append to the HTML tag. */
  {@inject? bodyAttrs: attributes}  /** Additional attributes to append to the body tag. */
  {@inject? live_reload_enabled: bool}  /** Whether live-reload mode is enabled. */
  {@inject? live_reload_url: trusted_resource_uri}  /** Live-reload JS target to inject, if enabled. */
  {@inject? contentSecurity: [header: string, policy: string]}  /** Injected CSP to apply via meta tags. */

  {let $languageSpec kind="text"}
    {if isNonnull($page) and isNonnull($page.meta) and isNonnull($page.meta.language)}
      {call gust.base.languageSpec}
          {param spec: $page.meta.language /}
      {/call}
    {else}en-US{/if}
  {/let}

  {let $prefixes kind='text'}
      {if isNonnull($page) and isNonnull($page.meta) and isNonnull($page.meta.prefixList)}
          {call .prefixes}
            {param prefixes: $page.meta.prefixList /}
          {/call}
      {/if}
  {/let}

  <!doctype html>
  <html
     class="no-js"{if isNonnull($languageSpec)} lang="{$languageSpec}"{/if}
     {if isNonnull($prefixes)}prefix="{$prefixes}"{/if}
     {if isNonnull($htmlAttrs)}{$htmlAttrs}{/if}>
  <head>
      <meta charset="utf-8">

      {if isNonnull($base)}
        <base href="{$base}">
      {/if}
      {if isNonnull($preconnect)}
          {for $preconnectDirective in $preconnect}
            <link href="{$preconnectDirective.domain}"
                  rel="preconnect"{if $preconnectDirective.crossorigin} crossorigin{/if}>
          {/for}
      {/if}
      {if isNonnull($contentSecurity)}
        <meta http-equiv="{$contentSecurity.header}" content="{$contentSecurity.policy}">
      {/if}
      {if isNonnull($preamble)}
          {$preamble}
      {/if}
      {if isNonnull($liftedCSS)}
        <style type="text/css">{$liftedCSS}</style>
      {/if}
      {if isNonnull($page) and isNonnull($page.styles) and isNonnull($page.styles.linkList)}
          {for $styleDirective in $page.styles.linkList}
              {call gust.dom.assets.stylesheet}
                  {param sheet: $styleDirective.uri /}
                  {param media: $styleDirective.media /}
              {/call}
          {/for}
      {/if}
      {if isNonnull($page) and isNonnull($page.meta) and $page.meta.linkList}
          {for $linkDirective in $page.meta.linkList}
              <link rel="{$linkDirective.relevance}"
                    href="{$linkDirective.href}"
                    {if $linkDirective.type}type="{$linkDirective.type}"{/if}>

          {/for}
      {/if}
      {if isNonnull($page) and isNonnull($page.meta) and $page.meta.viewport}
        <meta name="viewport" content="{$page.meta.viewport}">
      {else}
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover">
      {/if}
      {if isNonnull($page) and isNonnull($page.meta) and $page.meta.manifest}
        <link rel="manifest" href="{$page.meta.manifest}">
      {/if}
      {if isNonnull($live_reload_enabled) and $live_reload_enabled and isNonnull($live_reload_url)}
        <script type="text/javascript" src="{$live_reload_url}"></script>
      {/if}
      {if isNonnull($liftedJS)}
        <script id="{xid('page-data')}" type="application/json">
          {if isNonnull($liftedJS)}
                {$liftedJS}
          {/if}
        </script>
      {/if}
      {if isNonnull($page) and isNonnull($page.scripts) and $page.scripts.linkList}
          {for $scriptDirective in $page.scripts.linkList}
              {call gust.dom.assets.script}
                  {param script: $scriptDirective.uri /}
                  {param id: $scriptDirective.id /}
                  {param defer: $scriptDirective.defer /}
                  {param async: $scriptDirective.async /}
                  {param module: $scriptDirective.module /}
              {/call}
          {/for}
      {/if}
      {if isNonnull($page) and isNonnull($page.meta) and $page.meta.theme}
        <meta name="theme-color" content="{$page.meta.theme}">
      {/if}
      {if isNonnull($page) and isNonnull($page.meta) and $page.meta.touchIcon}
        <link rel="apple-touch-icon" href="{$page.meta.touchIcon}">
      {/if}
      {if isNonnull($page) and isNonnull($page.meta) and $page.meta.startupImage}
        <link rel="apple-touch-startup-image" href="{$page.meta.startupImage}">
      {/if}
      {if isNonnull($page) and isNonnull($page.meta) and $page.meta.description}
        <meta name="description" content="{$page.meta.description}">
      {/if}
      {if isNonnull($page) and isNonnull($page.meta) and length($page.meta.keywordList) > 0}
          {let $metaKeywords kind="text"}
              {for $keyword in $page.meta.keywordList}
                  {if not isFirst($keyword)}, {/if}
                  {$keyword}
              {/for}
          {/let}
        <meta name="keywords" content="{$metaKeywords}">
      {/if}
      {if isNonnull($additionalHead)}{$additionalHead}{/if}
      {if isNonnull($page) and isNonnull($page.meta) and isNonnull($page.meta.title)}
        <title>{$page.meta.title}</title>
      {/if}
      {if isNonnull($page) and isNonnull($page.meta) and isNonnull($page.meta.openGraph)}
        {if isNonnull($page.meta.openGraph.url)}
          {if $page.meta.openGraph.url}
              <meta property="og:url" content="{$page.meta.openGraph.url}">
          {/if}
        {/if}
        {if isNonnull($page.meta.openGraph.title)}
          {if $page.meta.openGraph.title}
              <meta property="og:title" content="{$page.meta.openGraph.title}">
              <meta name="twitter:title" content="{$page.meta.openGraph.title}">
          {/if}
        {/if}
        {if isNonnull($page.meta.openGraph.description)}
          {if $page.meta.openGraph.description}
              <meta property="og:description" content="{$page.meta.openGraph.description}">
              <meta name="twitter:description" content="{$page.meta.openGraph.description}">
          {/if}
        {/if}
        {if isNonnull($page.meta.openGraph.image)}
          {if $page.meta.openGraph.image}
              <meta property="og:image" content="{$page.meta.openGraph.image}">
              <meta name="twitter:image:src" content="{$page.meta.openGraph.image}">
          {/if}
        {/if}
        {if isNonnull($page.meta.openGraph.imageHeight)}
          {if $page.meta.openGraph.imageHeight > 0}
              <meta property="og:image:height" content="{$page.meta.openGraph.imageHeight}">
          {/if}
        {/if}
        {if isNonnull($page.meta.openGraph.imageWidth)}
          {if $page.meta.openGraph.imageWidth > 0}
              <meta property="og:image:width" content="{$page.meta.openGraph.imageWidth}">
          {/if}
        {/if}
        {if isNonnull($languageSpec)}
          <meta property="og:locale" content="{$languageSpec}">
        {/if}
        {if isNonnull($page.meta.openGraph.type)}
          {if $page.meta.openGraph.type}
              <meta property="og:type" content="{$page.meta.openGraph.type}">
              <meta name="twitter:card" content="summary">
          {/if}
        {/if}
        {if isNonnull($page.meta.openGraph.canonical)}
          {if $page.meta.openGraph.canonical}
              <meta property="og:url" content="{$page.meta.openGraph.canonical}">
          {/if}
        {/if}
        {if isNonnull($page.meta.openGraph.fbApp)}
          {if $page.meta.openGraph.fbApp}
              <meta property="fb:app_id" content="{$page.meta.openGraph.fbApp}">
          {/if}
        {/if}
        {if isNonnull($page.meta.openGraph.twitterSite)}
          {if $page.meta.openGraph.twitterSite}
              <meta name="twitter:site" content="{$page.meta.openGraph.twitterSite}">
          {/if}
        {/if}
        {if isNonnull($page.meta.openGraph.twitterCreator)}
          {if $page.meta.openGraph.twitterCreator}
              <meta name="twitter:creator" content="{$page.meta.openGraph.twitterCreator}">
          {/if}
        {/if}
      {/if}
      {if isNonnull($ogTags)}
          {$ogTags}
      {/if}
      {if isNonnull($page) and isNonnull($page.meta) and isNonnull($page.meta.robots)}
          <meta name="robots" content="{$page.meta.robots}">
      {/if}
      {if isNonnull($page) and isNonnull($page.meta) and isNonnull($page.meta.googlebot)}
          <meta name="googlebot" content="{$page.meta.googlebot}">
      {/if}
      {if isNonnull($page) and isNonnull($page.meta) and isNonnull($page.meta.rating)}
          <meta name="rating" content="{$page.meta.rating}">
      {/if}
  </head>
  <body{if isNonnull($bodyClass)} class="{$bodyClass}"{/if}{if isNonnull($htmlAttrs)} {$bodyAttrs}{/if}>
      {call .contentRoot}
          {param pageId: $pageId /}
          {param mobile: $mobile /}
          {param content: $content /}
          {param pageClass: $pageClass /}
      {/call}
      {if isNonnull($jsonLD)}
          <script type="application/ld+json">{$jsonLD}</script>
      {/if}
  </body>
  </html>
{/template}
