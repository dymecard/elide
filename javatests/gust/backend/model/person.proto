/*
 * Copyright Â© 2020, The Gust Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */
syntax = "proto3";

package gust.backend.model;

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = false;
option java_string_check_utf8 = true;
option java_outer_classname = "PersonRecord";

import "gust/core/datamodel.proto";


// Proto for dependency testing.
message Person {
  option (core.role) = OBJECT;
  option (core.table).name = "People";

  // Unique record ID.
  PersonKey key = 1 [
    (core.field).type = KEY,
    (core.column).name = "Key"
  ];

  // Salutation name.
  string name = 2 [
    (core.column).name = "Name",
    (core.column).size = 1024
  ];

  // Person's contact info.
  ContactInfo contact_info = 3 [
    (core.column).name = "ContactInfo",
    (core.column).sptype = JSON
  ];
}


// Models a key.
message PersonKey {
  option (core.role) = OBJECT_KEY;
  option (core.db).path = "people";
  option (core.db).mode = COLLECTION;
  option (core.table).name = "People";

  // Unique record ID.
  string id = 1 [
    (core.field).type = ID,
    (core.spanner).size = 240
  ];
}


// Person's address.
message PersonAddress {
  // First line of the person's address.
  string first_line = 1;

  // Second line of the person's address.
  string second_line = 2;
}


// Simple nested record.
message ContactInfo {
  option (core.db).mode = NESTED;

  // Person's email address.
  string email_address = 1 [(core.column).name = "EmailAddress"];

  // Person's phone number in E164 format.
  string phone_e164 = 2 [(core.spanner).column = "PhoneE164"];

  // Person's address info.
  PersonAddress address = 3 [(core.column).ignore = true];
}


// Models a non-object.
message EnrollEvent {
  option (core.role) = EVENT;
}


// Sets up an example of every type.
message TypeBuffet {
  option (core.table).name = "TypeExample";

  // Sample type key.
  message SampleKey {
    option (core.role) = OBJECT_KEY;

    // Unique record ID.
    uint64 id = 1 [
      (core.field).type = ID,
      (core.spanner).size = 240,
      (core.spanner).type = INT64
    ];
  }

  enum SampleEnumeration {
    DEFAULT_ENUM = 0;
    ANOTHER_ENUM = 1;
  }

  // Unique record ID.
  SampleKey key = 1 [
    (core.field).type = KEY,
    (core.spanner).column = "ID"
  ];

  int32 int_normal = 2;
  int64 int_double = 3;
  uint32 uint_normal = 4;
  uint64 uint_double = 5;
  sint32 sint_normal = 6;
  sint64 sint_double = 7;
  fixed32 fixed_normal = 8;
  fixed64 fixed_double = 9;
  sfixed32 sfixed_normal = 10;
  sfixed64 sfixed_double = 11;
  string string_field = 12;
  bool bool_field = 13;
  bytes bytes_field = 14;
  float float_field = 15;
  double double_field = 16;
  SampleEnumeration enum_field = 17;
  repeated string labels = 18 [
    (core.spanner).size = 240
  ];
}
