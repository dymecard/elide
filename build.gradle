
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    /* Dependencies: Kotlin */
    implementation platform('org.jetbrains.kotlin:kotlin-bom')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    /* Dependencies: Micronaut */
    api platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-aop"
    implementation "io.micronaut:micronaut-core"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-inject-java"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-http-server"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-graal"
    implementation "io.micronaut:micronaut-views"
    implementation "io.micronaut:micronaut-router"
    implementation "io.micronaut:micronaut-session"
    implementation "io.micronaut:micronaut-tracing"
    implementation "io.micronaut:micronaut-multitenancy"
    implementation "io.micronaut:micronaut-security:$micronautSecurityVersion"
    implementation "io.micronaut.configuration:micronaut-redis-lettuce:$micronautRedisVersion"

    /* Dependencies: Google */
    api "com.google.guava:guava:$guavaVersion"
    api "com.google.template:soy:$soyVersion"
    api "com.google.protobuf:protobuf-java:$protobufVersion"
    implementation "com.google.code.findbugs:jsr305:$findbugsVersion"
    implementation "com.google.template:soy:$soyVersion"

    /* Dependencies: Testing */
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion" 
}

version project.projectVersion
group projectGroupId

subprojects {
    group projectGroupId
    version project.projectVersion
}

sourceSets {
    main.java.srcDirs = ['java']
}

signing {
    if (signing == "true") {
        if (gpg2 == "true") {
            useGpgCmd()
        }
        sign configurations.archives
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId = projectGroupId
            artifactId = project.name
            version = project.projectVersion

            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }

            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]

                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }

    repositories {
        maven {
            if (github == "true") {
                url = "https://maven.pkg.github.com/sgammon/gust"
                credentials {
                    username "$githubUsername"
                    password "$githubToken"
                }
            } else {
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username "$sonatypeUsername"
                    password "$sonatypePassword"
                }
           }
        }
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}


def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        root.children().last() + {
            name "Gust Framework"
            description "Holistic app development framework. Be deliberate with every byte"
            url "https://github.com/sgammon/gust"

            licenses {
                license {
                    name "The Apache License, Version 2.0"
                    url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                }
            }

            developers {
                developer {
                    id "sgammon"
                    name "Sam Gammon"
                    email "sam@bloomworks.io"
                }
            }

            scm {
                connection "scm:git:git://github.com/sgammon/gust.git"
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }

    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }

    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

