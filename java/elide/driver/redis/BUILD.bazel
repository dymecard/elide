##
# Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
#
# The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
# are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
# this code in object or source form requires and implies consent and agreement to that license in principle and
# practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
# Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
# Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
# by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
# is strictly forbidden except in adherence with assigned license requirements.
##

package(
    default_visibility = ["//visibility:public"],
)

load(
    "//tools/defs/java:java.bzl",
    "java_library",
    "maven",
)
load(
    "//tools/defs/model:model.bzl",
    "javaproto",
)


_COMMON_DEPS = [
    maven("javax.annotation:javax.annotation.api"),
    maven("jakarta.inject:jakarta.inject-api"),
    maven("com.google.code.findbugs:jsr305"),
    maven("com.google.errorprone:error_prone_annotations"),
    maven("io.lettuce:lettuce-core"),
    "@com_google_protobuf//:protobuf_java",
    "//java/elide/runtime/jvm",
    "//java/elide/runtime",
    maven("org.slf4j:slf4j-api"),
]


java_library(
    name = "package-info",
    srcs = ["package-info.java"],
)

java_library(
    name = "RedisInternals",
    srcs = ["RedisInternals.java"],
    deps = [
        "//java/elide/model:EncodedModel",
        "//java/elide/model:ModelMetadata",
        "//java/elide/util:Hex",
    ],
)

java_library(
    name = "RedisCache",
    srcs = ["RedisCache.java"],
    deps = [
        ":RedisInternals",
        "//java/elide/model:CacheDriver",
        "//java/elide/model:CacheOptions",
        "//java/elide/model:DeleteOptions",
        "//java/elide/model:EncodedModel",
        "//java/elide/model:FetchOptions",
        "//java/elide/model:ModelCodec",
        "//java/elide/model:ModelMetadata",
        "//java/elide/model:UpdateOptions",
        "//java/elide/model:WriteOptions",
        maven("com.google.guava:guava"),
        maven("org.reactivestreams:reactive-streams"),
    ] + _COMMON_DEPS,
)

java_library(
    name = "RedisAdapter",
    srcs = ["RedisAdapter.java"],
    deps = [
        ":RedisDriver",
        "//java/elide/model:CacheDriver",
        "//java/elide/model:EncodingMode",
        "//java/elide/model:EncodedModel",
        "//java/elide/model:InvalidModelType",
        "//java/elide/model:ModelAdapter",
        "//java/elide/model:ModelCodec",
        "//java/elide/model:ModelMetadata",
        "//java/elide/model:PersistenceDriver",
        "//java/elide/model:ProtoModelCodec",
        maven("com.google.guava:guava"),
        maven("org.reactivestreams:reactive-streams"),
        javaproto("//elide/proto/core:datamodel"),
    ] + _COMMON_DEPS,
)

java_library(
    name = "RedisDriver",
    srcs = ["RedisDriver.java"],
    deps = [
        ":RedisInternals",
        "//java/elide/model:DeleteOptions",
        "//java/elide/model:EncodedModel",
        "//java/elide/model:FetchOptions",
        "//java/elide/model:ModelCodec",
        "//java/elide/model:ModelWriteConflict",
        "//java/elide/model:ModelWriteFailure",
        "//java/elide/model:ModelMetadata",
        "//java/elide/model:PersistenceDriver",
        "//java/elide/model:PersistenceException",
        "//java/elide/model:UpdateOptions",
        "//java/elide/model:WriteOptions",
        "//java/elide/util:Hex",
        maven("com.google.guava:guava"),
        javaproto("//elide/proto/core:datamodel"),
    ] + _COMMON_DEPS,
)

java_library(
    name = "RedisEncodedModelCodec",
    srcs = ["RedisEncodedModelCodec.java"],
    deps = [
        "//java/elide/model:EncodedModel",
    ] + _COMMON_DEPS,
)

java_library(
    name = "redis",
    exports = [
        ":package-info",
        ":RedisAdapter",
        ":RedisCache",
        ":RedisDriver",
        ":RedisEncodedModelCodec",
    ],
)

filegroup(
    name = "sources",
    srcs = glob(["*.java"]),
)
